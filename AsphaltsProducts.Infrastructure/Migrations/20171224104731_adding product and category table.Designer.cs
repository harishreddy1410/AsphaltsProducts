// <auto-generated />
using AsphaltsProducts.Domain.Models.ECommerce;
using AsphaltsProducts.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace AsphaltsProducts.Infrastructure.Migrations
{
    [DbContext(typeof(AsphaltsDbContext))]
    [Migration("20171224104731_adding product and category table")]
    partial class addingproductandcategorytable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AsphaltsProducts.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("AsphaltsProducts.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserRoles");
                });

            modelBuilder.Entity("AsphaltsProducts.Domain.Models.ECommerce.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DiscountedPrice");

                    b.Property<string>("OverallRating");

                    b.Property<int?>("ProductCategory");

                    b.Property<string>("ProductImage");

                    b.Property<string>("ProductName");

                    b.Property<string>("ProductRating")
                        .HasMaxLength(50);

                    b.Property<string>("ProductSpecifications");

                    b.Property<string>("ProductUrl");

                    b.Property<string>("RetailPrice");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategory");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AsphaltsProducts.Domain.Models.ECommerce.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("AsphaltsProducts.Domain.Models.ECommerce.Product", b =>
                {
                    b.HasOne("AsphaltsProducts.Domain.Models.ECommerce.ProductCategory", "CategoryId")
                        .WithMany("ProductList")
                        .HasForeignKey("ProductCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
